{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Porque o projeto foi desenvolvido? Esse projeto tem como objetivo elaborar uma API RESTfull capaz de cadastrar e autenticar usu\u00e1rios. E dockernizar esse projeto para ser facilmente acess\u00edvel. Tecnologias utilizadas FASTAPI (framework em python para desenvolvimento de APIs) SWAGGERUI (incluso no fastapi para desenvolvimento autom\u00e1tico de documenta\u00e7\u00e3o) PYDANTIC (m\u00e9todo de tipagem para o python) JWT (m\u00e9todo seguro para transmitir dados de maneira segura) SQLalchemy (ORM para conectar a base de dados) MYSQL (base de dados) Docker (m\u00e9todo de conteineriza\u00e7\u00e3o do aplicativo) MKDocs (maneira de fazer documenta\u00e7\u00e3o utilizando markdown) Como rodar a aplica\u00e7\u00e3o? Consegue acessar a aplica\u00e7\u00e3o acessada no seguinte link: link codigo rodando na aws Para rodar a aplica\u00e7\u00e3o em a sua m\u00e1quina local \u00e9 apenas necess\u00e1rio utilizar o comando abaixo . docker compose up e para descer o app fazer docker compose down Caso deseje criar na maquina local \u00e9 necessario mudar o compose.yaml para que ele de build e n\u00e3o rode com o arquivo Clonar o reposit\u00f3rio Na pasta raiz do reposit\u00f3rio copiar o docker-composeDEVELOPMENT para o arquivo docker-compose.yml Com o docker baixado rodar o seguinte comando; docker compose up --build Com isso voc\u00ea vai ter criado a sua pr\u00f3pria imagem do app, voce pode utilizar agora os comandos docker compose up e docker compose down para colocar no ar e retirar do ar sua aplica\u00e7\u00e3o. Como abrir a documenta\u00e7\u00e3o Esse projeto tem dois tipos de documenta\u00e7\u00e3o, uma feita com SWAGGERUI que \u00e9 a documenta\u00e7\u00e3o das apis e uma feita com Mkdocs. Para acessar a primeira quando o projeto estiver rodando acessar a seguite url : http://localhost:8000/docs A segunda voc\u00ea pode acessar pelos srquivos markdown na pasta AppDocumentation/docs ou de maneira mais estruturada voce roda o seguinte comando no terminal dentro da aba appDocumeentation mkdocs serve Com isso abrira uma url em que voce pode ler a documenta\u00e7\u00e3o de forma mais organizada link para imgagem no docker hub link para docker hub Onde o compose.yaml esta? O arquivo compose.yaml est\u00e1 na raiz do projeto. Segue o codigo dele: services: app: image: joaokb/projeto1-app # Utilize a imagem publicada no Docker Hub ports: - \"8000:8000\" # Portas abertas s\u00e3o necess\u00e1rias para acessar o servi\u00e7o fora do container. environment: - SECRET_KEY=${SECRET_KEY:-2e6e8cc741f246604c750dcc672fed67c877b2fe9f77eafaa41245ce91b5a0d3} - sqlite_file_name=${sqlite_file_name:-database.db} - salt=${salt:-18274393} - MYSQL_USER=${MYSQL_USER:-user} - MYSQL_PASSWORD=${MYSQL_PASSWORD:-cloud} - DB_HOST=mysql - DB_PORT=3306 - MYSQL_DATABASE=${MYSQL_DB:-db} depends_on: mysql: condition: service_healthy mysql: image: mysql:8.0 restart: always environment: MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_password} MYSQL_USER: ${MYSQL_USER:-user} MYSQL_PASSWORD: ${MYSQL_PASSWORD:-cloud} MYSQL_DATABASE: ${MYSQL_DB:-db} healthcheck: test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"] interval: 10s timeout: 5s retries: 10 link video etapa 1 link video PROVA QUE APP FUNFA link video etapa 2 Video Etapa 2 video etapa 2","title":"Home"},{"location":"#porque-o-projeto-foi-desenvolvido","text":"Esse projeto tem como objetivo elaborar uma API RESTfull capaz de cadastrar e autenticar usu\u00e1rios. E dockernizar esse projeto para ser facilmente acess\u00edvel.","title":"Porque o projeto foi desenvolvido?"},{"location":"#tecnologias-utilizadas","text":"FASTAPI (framework em python para desenvolvimento de APIs) SWAGGERUI (incluso no fastapi para desenvolvimento autom\u00e1tico de documenta\u00e7\u00e3o) PYDANTIC (m\u00e9todo de tipagem para o python) JWT (m\u00e9todo seguro para transmitir dados de maneira segura) SQLalchemy (ORM para conectar a base de dados) MYSQL (base de dados) Docker (m\u00e9todo de conteineriza\u00e7\u00e3o do aplicativo) MKDocs (maneira de fazer documenta\u00e7\u00e3o utilizando markdown)","title":"Tecnologias utilizadas"},{"location":"#como-rodar-a-aplicacao","text":"Consegue acessar a aplica\u00e7\u00e3o acessada no seguinte link: link codigo rodando na aws Para rodar a aplica\u00e7\u00e3o em a sua m\u00e1quina local \u00e9 apenas necess\u00e1rio utilizar o comando abaixo . docker compose up e para descer o app fazer docker compose down Caso deseje criar na maquina local \u00e9 necessario mudar o compose.yaml para que ele de build e n\u00e3o rode com o arquivo Clonar o reposit\u00f3rio Na pasta raiz do reposit\u00f3rio copiar o docker-composeDEVELOPMENT para o arquivo docker-compose.yml Com o docker baixado rodar o seguinte comando; docker compose up --build Com isso voc\u00ea vai ter criado a sua pr\u00f3pria imagem do app, voce pode utilizar agora os comandos docker compose up e docker compose down para colocar no ar e retirar do ar sua aplica\u00e7\u00e3o.","title":"Como rodar a aplica\u00e7\u00e3o?"},{"location":"#como-abrir-a-documentacao","text":"Esse projeto tem dois tipos de documenta\u00e7\u00e3o, uma feita com SWAGGERUI que \u00e9 a documenta\u00e7\u00e3o das apis e uma feita com Mkdocs. Para acessar a primeira quando o projeto estiver rodando acessar a seguite url : http://localhost:8000/docs A segunda voc\u00ea pode acessar pelos srquivos markdown na pasta AppDocumentation/docs ou de maneira mais estruturada voce roda o seguinte comando no terminal dentro da aba appDocumeentation mkdocs serve Com isso abrira uma url em que voce pode ler a documenta\u00e7\u00e3o de forma mais organizada","title":"Como abrir a documenta\u00e7\u00e3o"},{"location":"#link-para-imgagem-no-docker-hub","text":"link para docker hub","title":"link para imgagem no docker hub"},{"location":"#onde-o-composeyaml-esta","text":"O arquivo compose.yaml est\u00e1 na raiz do projeto. Segue o codigo dele: services: app: image: joaokb/projeto1-app # Utilize a imagem publicada no Docker Hub ports: - \"8000:8000\" # Portas abertas s\u00e3o necess\u00e1rias para acessar o servi\u00e7o fora do container. environment: - SECRET_KEY=${SECRET_KEY:-2e6e8cc741f246604c750dcc672fed67c877b2fe9f77eafaa41245ce91b5a0d3} - sqlite_file_name=${sqlite_file_name:-database.db} - salt=${salt:-18274393} - MYSQL_USER=${MYSQL_USER:-user} - MYSQL_PASSWORD=${MYSQL_PASSWORD:-cloud} - DB_HOST=mysql - DB_PORT=3306 - MYSQL_DATABASE=${MYSQL_DB:-db} depends_on: mysql: condition: service_healthy mysql: image: mysql:8.0 restart: always environment: MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_password} MYSQL_USER: ${MYSQL_USER:-user} MYSQL_PASSWORD: ${MYSQL_PASSWORD:-cloud} MYSQL_DATABASE: ${MYSQL_DB:-db} healthcheck: test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"] interval: 10s timeout: 5s retries: 10","title":"Onde o compose.yaml esta?"},{"location":"#link-video-etapa-1","text":"link video PROVA QUE APP FUNFA","title":"link video etapa 1"},{"location":"#link-video-etapa-2","text":"","title":"link video etapa 2"},{"location":"#video-etapa-2","text":"video etapa 2","title":"Video Etapa 2"},{"location":"Api/","text":"Documenta\u00e7\u00e3o da API A documenta\u00e7\u00e3o da APi tamb\u00e9m pode ser obtida pelo swagger docs: \u00e9 possivel encontr\u00e1la no seguinte link: link codigo rodando na aws Esta API permite o gerenciamento de usu\u00e1rios, autentica\u00e7\u00e3o e acesso a informa\u00e7\u00f5es de mercado. Endpoints 1. Obter todos os usu\u00e1rios URL: /usuarios/ M\u00e9todo: GET Par\u00e2metros de Query: offset (int): Define o deslocamento para os resultados (padr\u00e3o: 0 ). limit (int): Define o n\u00famero m\u00e1ximo de resultados a serem retornados (m\u00e1ximo: 100 ). Resposta: Status: 200 OK Corpo: Lista de usu\u00e1rios no formato do esquema UserSchema . Tags: Usuarios Descri\u00e7\u00e3o: Retorna a lista de todos os usu\u00e1rios dispon\u00edveis (cadastrados). 2. Registrar um novo usu\u00e1rio URL: /registrar/ M\u00e9todo: POST Par\u00e2metros do Corpo: Objeto do tipo UserSchema contendo as informa\u00e7\u00f5es do usu\u00e1rio. Resposta: Status: 201 Created Corpo: Objeto Token com o token JWT gerado para o novo usu\u00e1rio. Erros: Status: 409 Conflict \u2013 Caso o e-mail j\u00e1 esteja cadastrado. Tags: Usuarios Descri\u00e7\u00e3o: Adiciona um novo usu\u00e1rio com as informa\u00e7\u00f5es fornecidas. 3. Login de usu\u00e1rio URL: /login M\u00e9todo: POST Par\u00e2metros do Corpo: Objeto do tipo UserSchemaValidate contendo email e senha . Resposta: Status: 200 OK Corpo: Objeto Token com o token JWT gerado. Erros: Status: 401 Unauthorized \u2013 Caso o e-mail n\u00e3o esteja cadastrado ou a senha esteja incorreta. Tags: Usuarios Descri\u00e7\u00e3o: Autentica um usu\u00e1rio e retorna o token JWT se as credenciais estiverem corretas. 4. Obter informa\u00e7\u00f5es do usu\u00e1rio autenticado URL: /data M\u00e9todo: GET Cabe\u00e7alhos: Authorization: Bearer <token> Resposta: Status: 200 OK Corpo: Dados hist\u00f3ricos de pre\u00e7os de fechamento da empresa \"T\". Erros: Status: 401 Unauthorized \u2013 Caso o token esteja expirado ou seja inv\u00e1lido. Status: 403 Forbidden \u2013 Caso o esquema de autentica\u00e7\u00e3o seja inv\u00e1lido. Status: 404 Not Found \u2013 Caso o usu\u00e1rio n\u00e3o seja encontrado. Tags: Usuarios Descri\u00e7\u00e3o: Retorna detalhes hist\u00f3ricos da empresa \"T\" (via Yahoo Finance) para o usu\u00e1rio autenticado. 5. Consultar informa\u00e7\u00f5es do usu\u00e1rio autenticado URL: /consultar M\u00e9todo: GET Cabe\u00e7alhos: Authorization: Bearer <token> Resposta: Status: 200 OK Corpo: Dados hist\u00f3ricos de pre\u00e7os de fechamento da empresa \"T\". Formato: Uma string contendo as datas e os pre\u00e7os de fechamento dos \u00faltimos 5 dias. Erros: Status: 401 Unauthorized \u2013 Caso o token esteja expirado ou inv\u00e1lido. Status: 403 Forbidden \u2013 Caso o esquema de autentica\u00e7\u00e3o seja inv\u00e1lido. Status: 404 Not Found \u2013 Caso o usu\u00e1rio autenticado n\u00e3o seja encontrado. Tags: Usuarios Descri\u00e7\u00e3o: Retorna os dados hist\u00f3ricos de mercado da empresa \"T\" (via Yahoo Finance) para o usu\u00e1rio atualmente autenticado. Testagem endpoints Registrar Registrar Funcionando Registrar j\u00e1 cadastrado Login Login Funcionando Login com email n\u00e3o encontrado Login senha n\u00e3o encontrada Consultar Consultar sem login Conulta credenciais invalidas Consulta com login","title":"API"},{"location":"Api/#documentacao-da-api","text":"A documenta\u00e7\u00e3o da APi tamb\u00e9m pode ser obtida pelo swagger docs: \u00e9 possivel encontr\u00e1la no seguinte link: link codigo rodando na aws Esta API permite o gerenciamento de usu\u00e1rios, autentica\u00e7\u00e3o e acesso a informa\u00e7\u00f5es de mercado.","title":"Documenta\u00e7\u00e3o da API"},{"location":"Api/#endpoints","text":"","title":"Endpoints"},{"location":"Api/#1-obter-todos-os-usuarios","text":"URL: /usuarios/ M\u00e9todo: GET Par\u00e2metros de Query: offset (int): Define o deslocamento para os resultados (padr\u00e3o: 0 ). limit (int): Define o n\u00famero m\u00e1ximo de resultados a serem retornados (m\u00e1ximo: 100 ). Resposta: Status: 200 OK Corpo: Lista de usu\u00e1rios no formato do esquema UserSchema . Tags: Usuarios Descri\u00e7\u00e3o: Retorna a lista de todos os usu\u00e1rios dispon\u00edveis (cadastrados).","title":"1. Obter todos os usu\u00e1rios"},{"location":"Api/#2-registrar-um-novo-usuario","text":"URL: /registrar/ M\u00e9todo: POST Par\u00e2metros do Corpo: Objeto do tipo UserSchema contendo as informa\u00e7\u00f5es do usu\u00e1rio. Resposta: Status: 201 Created Corpo: Objeto Token com o token JWT gerado para o novo usu\u00e1rio. Erros: Status: 409 Conflict \u2013 Caso o e-mail j\u00e1 esteja cadastrado. Tags: Usuarios","title":"2. Registrar um novo usu\u00e1rio"},{"location":"Api/#descricao-adiciona-um-novo-usuario-com-as-informacoes-fornecidas","text":"","title":"Descri\u00e7\u00e3o: Adiciona um novo usu\u00e1rio com as informa\u00e7\u00f5es fornecidas."},{"location":"Api/#3-login-de-usuario","text":"URL: /login M\u00e9todo: POST Par\u00e2metros do Corpo: Objeto do tipo UserSchemaValidate contendo email e senha . Resposta: Status: 200 OK Corpo: Objeto Token com o token JWT gerado. Erros: Status: 401 Unauthorized \u2013 Caso o e-mail n\u00e3o esteja cadastrado ou a senha esteja incorreta. Tags: Usuarios Descri\u00e7\u00e3o: Autentica um usu\u00e1rio e retorna o token JWT se as credenciais estiverem corretas.","title":"3. Login de usu\u00e1rio"},{"location":"Api/#4-obter-informacoes-do-usuario-autenticado","text":"URL: /data M\u00e9todo: GET Cabe\u00e7alhos: Authorization: Bearer <token> Resposta: Status: 200 OK Corpo: Dados hist\u00f3ricos de pre\u00e7os de fechamento da empresa \"T\". Erros: Status: 401 Unauthorized \u2013 Caso o token esteja expirado ou seja inv\u00e1lido. Status: 403 Forbidden \u2013 Caso o esquema de autentica\u00e7\u00e3o seja inv\u00e1lido. Status: 404 Not Found \u2013 Caso o usu\u00e1rio n\u00e3o seja encontrado. Tags: Usuarios Descri\u00e7\u00e3o: Retorna detalhes hist\u00f3ricos da empresa \"T\" (via Yahoo Finance) para o usu\u00e1rio autenticado.","title":"4. Obter informa\u00e7\u00f5es do usu\u00e1rio autenticado"},{"location":"Api/#5-consultar-informacoes-do-usuario-autenticado","text":"URL: /consultar M\u00e9todo: GET Cabe\u00e7alhos: Authorization: Bearer <token> Resposta: Status: 200 OK Corpo: Dados hist\u00f3ricos de pre\u00e7os de fechamento da empresa \"T\". Formato: Uma string contendo as datas e os pre\u00e7os de fechamento dos \u00faltimos 5 dias. Erros: Status: 401 Unauthorized \u2013 Caso o token esteja expirado ou inv\u00e1lido. Status: 403 Forbidden \u2013 Caso o esquema de autentica\u00e7\u00e3o seja inv\u00e1lido. Status: 404 Not Found \u2013 Caso o usu\u00e1rio autenticado n\u00e3o seja encontrado. Tags: Usuarios Descri\u00e7\u00e3o: Retorna os dados hist\u00f3ricos de mercado da empresa \"T\" (via Yahoo Finance) para o usu\u00e1rio atualmente autenticado.","title":"5. Consultar informa\u00e7\u00f5es do usu\u00e1rio autenticado"},{"location":"Api/#testagem-endpoints","text":"","title":"Testagem endpoints"},{"location":"Api/#registrar","text":"","title":"Registrar"},{"location":"Api/#registrar-funcionando","text":"","title":"Registrar Funcionando"},{"location":"Api/#registrar-ja-cadastrado","text":"","title":"Registrar j\u00e1 cadastrado"},{"location":"Api/#login","text":"","title":"Login"},{"location":"Api/#login-funcionando","text":"","title":"Login Funcionando"},{"location":"Api/#login-com-email-nao-encontrado","text":"","title":"Login com email n\u00e3o encontrado"},{"location":"Api/#login-senha-nao-encontrada","text":"","title":"Login senha n\u00e3o encontrada"},{"location":"Api/#consultar","text":"","title":"Consultar"},{"location":"Api/#consultar-sem-login","text":"","title":"Consultar sem login"},{"location":"Api/#conulta-credenciais-invalidas","text":"","title":"Conulta credenciais invalidas"},{"location":"Api/#consulta-com-login","text":"","title":"Consulta com login"},{"location":"DEVELOPER/","text":"Como \u00e9 a estrutura de c\u00f3digo Fui inspirado pela estrutura que esta sendo recomendada no seguinte github: best practicies in fast-api A estrutura que eu fiz \u00e1 a seguinte: \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 Dockerfile # dockerfile utilizado para criar a imagme \u2502 \u251c\u2500\u2500 models.py # global database models \u2502 \u251c\u2500\u2500 router.py # router das apis \u2502 \u251c\u2500\u2500 database.py # db connection related stuff \u2502 \u251c\u2500\u2500 requirements.py # extens\u00f5es do python \u2502 \u251c\u2500\u2500 schemas.py # pydantic models \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 AppDocumentation/ \u2502 \u251c\u2500\u2500 amkdocs.yml #configura\u00e7\u00e3o da documenta\u00e7\u00e3o \u2502 \u2514\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500index.MD \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 DEVELOPER.MD \u2502 \u2514\u2500\u2500 site/ # site gerado mkdocs \u2502 \u251c\u2500\u2500index.html \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 404.html \u251c\u2500\u2500 requirements .txt \u251c\u2500\u2500 .env \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 docker-compose.yml # conteiner docker utilizado para testes \u2514\u2500\u2500 docker-composeDEBELOPMENT.yml #conteiner docker utilizado em desenvolvimento No fim do documento tem a estrutura recomendada: Autentica\u00e7\u00e3o A autentica\u00e7\u00e3o foi feita utilizando JWT nela voce cria um token de acesso passando a informa\u00e7\u00e3o que voc\u00ea quer encode com uma SECRET key um algoritmo de criptografia e coloca uma data de expira\u00e7\u00e3o para revogar a autentica\u00e7\u00e3o.Quando fizer uma requsi\u00e7\u00e3o para esse endpoint ele vai devolver o token JWT que tera a autentica\u00e7\u00e3o. Para acessar os dados que foram criptografados \u00e9 neces\u00e1rio do Token criado, para isso vai verfificar se o Usuario tem um token valido e vera se esse token ja foi expirado. Caso n\u00e3o for nenhum desses dois casos vai prosseguir com o intuito da requisi\u00e7\u00e3o. link para documenta\u00e7\u00e3o de jwt Como fiz o bearer do jwt link documenta\u00e7\u00e3o do jwt Estrutura recomendada no fast-api best practices In this structure, Each package has its own router, schemas, models, etc. fastapi-project \u251c\u2500\u2500 alembic/ \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u251c\u2500\u2500 router.py # auth main router with all the endpoints \u2502 \u2502 \u251c\u2500\u2500 schemas.py # pydantic models \u2502 \u2502 \u251c\u2500\u2500 models.py # database models \u2502 \u2502 \u251c\u2500\u2500 dependencies.py # router dependencies \u2502 \u2502 \u251c\u2500\u2500 config.py # local configs \u2502 \u2502 \u251c\u2500\u2500 constants.py # module-specific constants \u2502 \u2502 \u251c\u2500\u2500 exceptions.py # module-specific errors \u2502 \u2502 \u251c\u2500\u2500 service.py # module-specific business logic \u2502 \u2502 \u2514\u2500\u2500 utils.py # any other non-business logic functions \u2502 \u251c\u2500\u2500 aws \u2502 \u2502 \u251c\u2500\u2500 client.py # client model for external service communication \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u251c\u2500\u2500 config.py \u2502 \u2502 \u251c\u2500\u2500 constants.py \u2502 \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2502 \u2514\u2500\u2500 utils.py \u2502 \u2514\u2500\u2500 posts \u2502 \u2502 \u251c\u2500\u2500 router.py \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 dependencies.py \u2502 \u2502 \u251c\u2500\u2500 constants.py \u2502 \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2502 \u251c\u2500\u2500 service.py \u2502 \u2502 \u2514\u2500\u2500 utils.py \u2502 \u251c\u2500\u2500 config.py # global configs \u2502 \u251c\u2500\u2500 models.py # global database models \u2502 \u251c\u2500\u2500 exceptions.py # global exceptions \u2502 \u251c\u2500\u2500 pagination.py # global module e.g. pagination \u2502 \u251c\u2500\u2500 database.py # db connection related stuff \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 tests/ \u2502 \u251c\u2500\u2500 auth \u2502 \u251c\u2500\u2500 aws \u2502 \u2514\u2500\u2500 posts \u251c\u2500\u2500 templates/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 requirements \u2502 \u251c\u2500\u2500 base.txt \u2502 \u251c\u2500\u2500 dev.txt \u2502 \u2514\u2500\u2500 prod.txt \u251c\u2500\u2500 .env \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 logging.ini \u2514\u2500\u2500 alembic.ini In this structure Store all domain directories inside src folder. src/ : The highest level of an app, contains common models, configs, and constants, etc. src/main.py : Root of the project, which inits the FastAPI app Each package has its own router, schemas, models, etc. router.py : is the core of each module with all the endpoints schemas.py : for pydantic models models.py : for database models service.py : module-specific business logic dependencies.py : router dependencies constants.py : module-specific constants and error codes config.py : e.g. env vars utils.py : non-business logic functions, e.g. response normalization, data enrichment, etc. exceptions.py : module-specific exceptions, e.g. PostNotFound , InvalidUserData Referencia referencia Referencia do mkdocs mkdocs.org . Schemas A \"schema\" is a definition or description of something. Not the code that implements it, but just an abstract description. No caso estamos utilizando schema para modelar como seria os par\u00e2metros que s\u00e3o necess\u00e1rios para passar para cada o modelo da base de dados Documenta\u00e7\u00e3o de Deploy com MkDocs Essa documenta\u00e7\u00e3o explica os comandos necess\u00e1rios para construir e publicar a documenta\u00e7\u00e3o do projeto usando MkDocs. 1. Constru\u00e7\u00e3o da Documenta\u00e7\u00e3o Para gerar a documenta\u00e7\u00e3o localmente, use o comando: mkdocs build Publicando no git hub -pages mkdocs gh-deploy --remote-branch Docs O que este comando faz? gh-deploy: Faz o deploy da documenta\u00e7\u00e3o no GitHub Pages. --remote-branch Docs: Especifica que a documenta\u00e7\u00e3o ser\u00e1 enviada para a branch Docs do reposit\u00f3rio remoto. Isso faz com que a vers\u00e3o mais recente da documenta\u00e7\u00e3o gerada seja publicada na branch Docs, tornando-a acess\u00edvel online.","title":"Developer"},{"location":"DEVELOPER/#como-e-a-estrutura-de-codigo","text":"Fui inspirado pela estrutura que esta sendo recomendada no seguinte github: best practicies in fast-api A estrutura que eu fiz \u00e1 a seguinte: \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 Dockerfile # dockerfile utilizado para criar a imagme \u2502 \u251c\u2500\u2500 models.py # global database models \u2502 \u251c\u2500\u2500 router.py # router das apis \u2502 \u251c\u2500\u2500 database.py # db connection related stuff \u2502 \u251c\u2500\u2500 requirements.py # extens\u00f5es do python \u2502 \u251c\u2500\u2500 schemas.py # pydantic models \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 AppDocumentation/ \u2502 \u251c\u2500\u2500 amkdocs.yml #configura\u00e7\u00e3o da documenta\u00e7\u00e3o \u2502 \u2514\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500index.MD \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 DEVELOPER.MD \u2502 \u2514\u2500\u2500 site/ # site gerado mkdocs \u2502 \u251c\u2500\u2500index.html \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 404.html \u251c\u2500\u2500 requirements .txt \u251c\u2500\u2500 .env \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 docker-compose.yml # conteiner docker utilizado para testes \u2514\u2500\u2500 docker-composeDEBELOPMENT.yml #conteiner docker utilizado em desenvolvimento No fim do documento tem a estrutura recomendada:","title":"Como \u00e9 a estrutura de c\u00f3digo"},{"location":"DEVELOPER/#autenticacao","text":"A autentica\u00e7\u00e3o foi feita utilizando JWT nela voce cria um token de acesso passando a informa\u00e7\u00e3o que voc\u00ea quer encode com uma SECRET key um algoritmo de criptografia e coloca uma data de expira\u00e7\u00e3o para revogar a autentica\u00e7\u00e3o.Quando fizer uma requsi\u00e7\u00e3o para esse endpoint ele vai devolver o token JWT que tera a autentica\u00e7\u00e3o. Para acessar os dados que foram criptografados \u00e9 neces\u00e1rio do Token criado, para isso vai verfificar se o Usuario tem um token valido e vera se esse token ja foi expirado. Caso n\u00e3o for nenhum desses dois casos vai prosseguir com o intuito da requisi\u00e7\u00e3o. link para documenta\u00e7\u00e3o de jwt Como fiz o bearer do jwt link documenta\u00e7\u00e3o do jwt","title":"Autentica\u00e7\u00e3o"},{"location":"DEVELOPER/#estrutura-recomendada-no-fast-api-best-practices","text":"In this structure, Each package has its own router, schemas, models, etc. fastapi-project \u251c\u2500\u2500 alembic/ \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u251c\u2500\u2500 router.py # auth main router with all the endpoints \u2502 \u2502 \u251c\u2500\u2500 schemas.py # pydantic models \u2502 \u2502 \u251c\u2500\u2500 models.py # database models \u2502 \u2502 \u251c\u2500\u2500 dependencies.py # router dependencies \u2502 \u2502 \u251c\u2500\u2500 config.py # local configs \u2502 \u2502 \u251c\u2500\u2500 constants.py # module-specific constants \u2502 \u2502 \u251c\u2500\u2500 exceptions.py # module-specific errors \u2502 \u2502 \u251c\u2500\u2500 service.py # module-specific business logic \u2502 \u2502 \u2514\u2500\u2500 utils.py # any other non-business logic functions \u2502 \u251c\u2500\u2500 aws \u2502 \u2502 \u251c\u2500\u2500 client.py # client model for external service communication \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u251c\u2500\u2500 config.py \u2502 \u2502 \u251c\u2500\u2500 constants.py \u2502 \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2502 \u2514\u2500\u2500 utils.py \u2502 \u2514\u2500\u2500 posts \u2502 \u2502 \u251c\u2500\u2500 router.py \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 dependencies.py \u2502 \u2502 \u251c\u2500\u2500 constants.py \u2502 \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2502 \u251c\u2500\u2500 service.py \u2502 \u2502 \u2514\u2500\u2500 utils.py \u2502 \u251c\u2500\u2500 config.py # global configs \u2502 \u251c\u2500\u2500 models.py # global database models \u2502 \u251c\u2500\u2500 exceptions.py # global exceptions \u2502 \u251c\u2500\u2500 pagination.py # global module e.g. pagination \u2502 \u251c\u2500\u2500 database.py # db connection related stuff \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 tests/ \u2502 \u251c\u2500\u2500 auth \u2502 \u251c\u2500\u2500 aws \u2502 \u2514\u2500\u2500 posts \u251c\u2500\u2500 templates/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 requirements \u2502 \u251c\u2500\u2500 base.txt \u2502 \u251c\u2500\u2500 dev.txt \u2502 \u2514\u2500\u2500 prod.txt \u251c\u2500\u2500 .env \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 logging.ini \u2514\u2500\u2500 alembic.ini","title":"Estrutura recomendada no fast-api best practices"},{"location":"DEVELOPER/#in-this-structure","text":"Store all domain directories inside src folder. src/ : The highest level of an app, contains common models, configs, and constants, etc. src/main.py : Root of the project, which inits the FastAPI app Each package has its own router, schemas, models, etc. router.py : is the core of each module with all the endpoints schemas.py : for pydantic models models.py : for database models service.py : module-specific business logic dependencies.py : router dependencies constants.py : module-specific constants and error codes config.py : e.g. env vars utils.py : non-business logic functions, e.g. response normalization, data enrichment, etc. exceptions.py : module-specific exceptions, e.g. PostNotFound , InvalidUserData","title":"In this structure"},{"location":"DEVELOPER/#referencia","text":"referencia Referencia do mkdocs mkdocs.org .","title":"Referencia"},{"location":"DEVELOPER/#schemas","text":"A \"schema\" is a definition or description of something. Not the code that implements it, but just an abstract description. No caso estamos utilizando schema para modelar como seria os par\u00e2metros que s\u00e3o necess\u00e1rios para passar para cada o modelo da base de dados","title":"Schemas"},{"location":"DEVELOPER/#documentacao-de-deploy-com-mkdocs","text":"Essa documenta\u00e7\u00e3o explica os comandos necess\u00e1rios para construir e publicar a documenta\u00e7\u00e3o do projeto usando MkDocs.","title":"Documenta\u00e7\u00e3o de Deploy com MkDocs"},{"location":"DEVELOPER/#1-construcao-da-documentacao","text":"Para gerar a documenta\u00e7\u00e3o localmente, use o comando: mkdocs build","title":"1. Constru\u00e7\u00e3o da Documenta\u00e7\u00e3o"},{"location":"DEVELOPER/#publicando-no-git-hub-pages","text":"mkdocs gh-deploy --remote-branch Docs O que este comando faz? gh-deploy: Faz o deploy da documenta\u00e7\u00e3o no GitHub Pages. --remote-branch Docs: Especifica que a documenta\u00e7\u00e3o ser\u00e1 enviada para a branch Docs do reposit\u00f3rio remoto. Isso faz com que a vers\u00e3o mais recente da documenta\u00e7\u00e3o gerada seja publicada na branch Docs, tornando-a acess\u00edvel online.","title":"Publicando no git hub -pages"},{"location":"PublicandoAWS/","text":"Publicando na AWS Pr\u00e9 requisitos ter uma conta aws com condi\u00e7oes de adiministrador J\u00e1 ter imagens no docker-hub que rodam em arquitetura x86_64 caso n\u00e3o acesse esse link e faca a sua imagem docker rodar com a arquitetura Conta ter acesso Ao cloudShell Instru\u00e7\u00f5es Acesse o cloud shell e instale o eksctl para fazer isso \u00e9 apenas rodar o comando abaixo: (pode rever no seguinte link :) # for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7` ARCH=amd64 PLATFORM=$(uname -s)_$ARCH curl -sLO \"https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz\" # (Optional) Verify checksum curl -sL \"https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt\" | grep $PLATFORM | sha256sum --check tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz sudo mv /tmp/eksctl /usr/local/bin Criar os clusters em s\u00e3o paulo: eksctl create cluster --name projcomp --region sa-east-1 --nodes 2 Configurando aws eks --region sa-east-1 update-kubeconfig --name projcomp Criando arquivo para dar deploy da minha aplica\u00e7ao deployment.yaml Segue o arquivo com variaveis de enviroment como exemplos: apiVersion: apps/v1 kind: Deployment metadata: name: fastapi-app spec: replicas: 1 selector: matchLabels: app: fastapi template: metadata: labels: app: fastapi spec: containers: - name: fastapi image: joaokb/projeto1-app:latest ports: - containerPort: 8000 env: - name: SECRET_KEY value: \"asdfj423419823he912b3912983h0982nr98n2948b928n492j903\" - name: sqlite value: \"dataaabase.db\" - name: salt value: \"salzinhotopppp\" - name: MYSQL_USER value: \"usuario\" - name: MYSQL_PASSWORD value: \"cloud\" - name: DB_HOST value: \"mysql\" - name: DB_PORT value: \"3306\" - name: MYSQL_DATABASE apiVersion: v1 kind: Service metadata: name: fastapi-service spec: type: LoadBalancer ports: - port: 80 targetPort: 8000 selector: app: fastapi Criando arquivo do deploy da database: db-deployment.yaml variaveis de enveroment como exemplo: apiVersion: apps/v1 kind: Deployment metadata: name: mysql-db-cloud spec: replicas: 1 selector: matchLabels: app: mysql template: metadata: labels: app: mysql spec: containers: - name: mysql image: mysql:8.0 ports: - containerPort: 3306 env: - name: MYSQL_ROOT_PASSWORD value: \"root_password\" - name: MYSQL_USER value: \"user\" - name: MYSQL_PASSWORD value: \"cloud\" - name: MYSQL_DATABASE value: \"db\" --- apiVersion: v1 kind: Service metadata: name: mysql spec: ports: Aplicando os arquivos criados: (rode no CloudShell) kubectl apply -f deployment.yaml Acesse a aplica\u00e7\u00e3o (aqui tem o link para ver onde ta publicado) kubectl get svc fastapi-service Como debugar caso de problema: kubectl get pods Esse comando \u00e9 usado para listar todos os pods no cluster Kubernetes. Um pod \u00e9 a menor unidade de implanta\u00e7\u00e3o no Kubernetes e pode conter um ou mais containers. Exemplo de uso kubectl get pods Exemplo de sa\u00edda NAME READY STATUS RESTARTS AGE fastapi-app-64757d454d-c7s72 1/1 Running 0 3d kubectl get deployments O comando kubectl get deployments exibe uma lista dos \"deployments\" no cluster Kubernetes. Um \"deployment\" \u00e9 uma configura\u00e7\u00e3o que especifica como o Kubernetes deve manter o n\u00famero desejado de r\u00e9plicas de um pod em execu\u00e7\u00e3o. O comando \u00e9 \u00fatil para visualizar o estado atual de cada deployment, como quantas r\u00e9plicas est\u00e3o sendo executadas, e se h\u00e1 algum erro nos pods. Exemplo de uso kubectl get deployments Exemplo de sa\u00edda NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE fastapi-app 1 1 1 1 3d kubectl logs <pod-name> O comando kubectl logs <pod-name> exibe os logs de cont\u00eaineres espec\u00edficos dentro de um pod. Isso \u00e9 \u00fatil para depura\u00e7\u00e3o e monitoramento, permitindo que voc\u00ea visualize a sa\u00edda de processos dentro do cont\u00eainer. Caso o pod tenha m\u00faltiplos cont\u00eaineres, voc\u00ea pode especificar qual cont\u00eainer visualizar. Exemplo de uso kubectl logs fastapi-app-64757d454d-c7s72 Exemplo de sa\u00edda INFO: FastAPI app started on http://0.0.0.0:8000 INFO: Uvicorn worker is ready to serve requests","title":"AWS"},{"location":"PublicandoAWS/#publicando-na-aws","text":"","title":"Publicando na AWS"},{"location":"PublicandoAWS/#pre-requisitos","text":"ter uma conta aws com condi\u00e7oes de adiministrador J\u00e1 ter imagens no docker-hub que rodam em arquitetura x86_64 caso n\u00e3o acesse esse link e faca a sua imagem docker rodar com a arquitetura Conta ter acesso Ao cloudShell","title":"Pr\u00e9 requisitos"},{"location":"PublicandoAWS/#instrucoes","text":"Acesse o cloud shell e instale o eksctl para fazer isso \u00e9 apenas rodar o comando abaixo: (pode rever no seguinte link :) # for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7` ARCH=amd64 PLATFORM=$(uname -s)_$ARCH curl -sLO \"https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz\" # (Optional) Verify checksum curl -sL \"https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt\" | grep $PLATFORM | sha256sum --check tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz sudo mv /tmp/eksctl /usr/local/bin Criar os clusters em s\u00e3o paulo: eksctl create cluster --name projcomp --region sa-east-1 --nodes 2 Configurando aws eks --region sa-east-1 update-kubeconfig --name projcomp Criando arquivo para dar deploy da minha aplica\u00e7ao deployment.yaml Segue o arquivo com variaveis de enviroment como exemplos: apiVersion: apps/v1 kind: Deployment metadata: name: fastapi-app spec: replicas: 1 selector: matchLabels: app: fastapi template: metadata: labels: app: fastapi spec: containers: - name: fastapi image: joaokb/projeto1-app:latest ports: - containerPort: 8000 env: - name: SECRET_KEY value: \"asdfj423419823he912b3912983h0982nr98n2948b928n492j903\" - name: sqlite value: \"dataaabase.db\" - name: salt value: \"salzinhotopppp\" - name: MYSQL_USER value: \"usuario\" - name: MYSQL_PASSWORD value: \"cloud\" - name: DB_HOST value: \"mysql\" - name: DB_PORT value: \"3306\" - name: MYSQL_DATABASE apiVersion: v1 kind: Service metadata: name: fastapi-service spec: type: LoadBalancer ports: - port: 80 targetPort: 8000 selector: app: fastapi Criando arquivo do deploy da database: db-deployment.yaml variaveis de enveroment como exemplo: apiVersion: apps/v1 kind: Deployment metadata: name: mysql-db-cloud spec: replicas: 1 selector: matchLabels: app: mysql template: metadata: labels: app: mysql spec: containers: - name: mysql image: mysql:8.0 ports: - containerPort: 3306 env: - name: MYSQL_ROOT_PASSWORD value: \"root_password\" - name: MYSQL_USER value: \"user\" - name: MYSQL_PASSWORD value: \"cloud\" - name: MYSQL_DATABASE value: \"db\" --- apiVersion: v1 kind: Service metadata: name: mysql spec: ports: Aplicando os arquivos criados: (rode no CloudShell) kubectl apply -f deployment.yaml Acesse a aplica\u00e7\u00e3o (aqui tem o link para ver onde ta publicado) kubectl get svc fastapi-service Como debugar caso de problema:","title":"Instru\u00e7\u00f5es"},{"location":"PublicandoAWS/#kubectl-get-pods","text":"Esse comando \u00e9 usado para listar todos os pods no cluster Kubernetes. Um pod \u00e9 a menor unidade de implanta\u00e7\u00e3o no Kubernetes e pode conter um ou mais containers.","title":"kubectl get pods"},{"location":"PublicandoAWS/#exemplo-de-uso","text":"kubectl get pods","title":"Exemplo de uso"},{"location":"PublicandoAWS/#exemplo-de-saida","text":"NAME READY STATUS RESTARTS AGE fastapi-app-64757d454d-c7s72 1/1 Running 0 3d","title":"Exemplo de sa\u00edda"},{"location":"PublicandoAWS/#kubectl-get-deployments","text":"O comando kubectl get deployments exibe uma lista dos \"deployments\" no cluster Kubernetes. Um \"deployment\" \u00e9 uma configura\u00e7\u00e3o que especifica como o Kubernetes deve manter o n\u00famero desejado de r\u00e9plicas de um pod em execu\u00e7\u00e3o. O comando \u00e9 \u00fatil para visualizar o estado atual de cada deployment, como quantas r\u00e9plicas est\u00e3o sendo executadas, e se h\u00e1 algum erro nos pods.","title":"kubectl get deployments"},{"location":"PublicandoAWS/#exemplo-de-uso_1","text":"kubectl get deployments","title":"Exemplo de uso"},{"location":"PublicandoAWS/#exemplo-de-saida_1","text":"NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE fastapi-app 1 1 1 1 3d","title":"Exemplo de sa\u00edda"},{"location":"PublicandoAWS/#kubectl-logs-pod-name","text":"O comando kubectl logs <pod-name> exibe os logs de cont\u00eaineres espec\u00edficos dentro de um pod. Isso \u00e9 \u00fatil para depura\u00e7\u00e3o e monitoramento, permitindo que voc\u00ea visualize a sa\u00edda de processos dentro do cont\u00eainer. Caso o pod tenha m\u00faltiplos cont\u00eaineres, voc\u00ea pode especificar qual cont\u00eainer visualizar.","title":"kubectl logs &lt;pod-name&gt;"},{"location":"PublicandoAWS/#exemplo-de-uso_2","text":"kubectl logs fastapi-app-64757d454d-c7s72","title":"Exemplo de uso"},{"location":"PublicandoAWS/#exemplo-de-saida_2","text":"INFO: FastAPI app started on http://0.0.0.0:8000 INFO: Uvicorn worker is ready to serve requests","title":"Exemplo de sa\u00edda"}]}